package main

import (
	"io/ioutil"
	"log"
	"os/exec"
	"path/filepath"
	"strings"
	"text/template"
)

func main() {
	src := readSrc()
	usg := usage()
	doc := render(src, map[string]string{"usage": usg})
	update(doc)
}

func readSrc() string {
	path := filepath.Join("README.md.go.tpl")
	src, err := ioutil.ReadFile(path)

	if err != nil {
		log.Fatal(err)
	}

	return string(src)
}

func usage() string {
	out, err := exec.Command("./kasa", "-h").Output()

	if err != nil {
		log.Fatal(err)
	}

	return strings.TrimSuffix(string(out), "\n")
}

func render(src string, vars map[string]string) string {
	tpl, err := template.New("").Parse(src)

	if err != nil {
		log.Fatal(err)
	}

	var buf strings.Builder
	err = tpl.Execute(&buf, vars)

	if err != nil {
		log.Fatal(err)
	}

	return buf.String()
}

func update(doc string) {
	path := filepath.Join("README.md")

	src := `<!---
Generated by the 'make readme'.  DO NOT EDIT!
-->
` + doc

	err := ioutil.WriteFile(path, []byte(src), 0o644)

	if err != nil {
		log.Fatal(err)
	}
}
